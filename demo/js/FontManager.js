// Generated by CoffeeScript 1.8.0
(function() {
  Poe.FontManager = (function() {
    function FontManager() {
      this.element = $('<link rel="stylesheet" type="text/css"></link>');
      $('head').append(this.element);
      Poe.Fonts = {};
      this.addedCallback = null;
    }

    FontManager.prototype.loadDefaults = function() {
      this.loadFont('Arimo', 'fonts/Arimo/Arimo-Regular.ttf');
      this.loadFont('Calligraffitti', 'fonts/Calligraffitti/Calligraffitti-Regular.ttf');
      this.loadFont('Cousine', 'fonts/Cousine/Cousine-Regular.ttf');
      this.loadFont('Droid Sans', 'fonts/Droid_Sans/DroidSans.ttf');
      this.loadFont('Droid Serif', 'fonts/Droid_Serif/DroidSerif.ttf');
      this.loadFont('Lobster', 'fonts/Lobster/Lobster-Regular.ttf');
      this.loadFont('Open Sans', 'fonts/Open_Sans/OpenSans-Regular.ttf');
      this.loadFont('Pacifico', 'fonts/Pacifico/Pacifico.ttf');
      this.loadFont('Raleway', 'fonts/Raleway/Raleway-Regular.ttf');
      this.loadFont('Syncopate', 'fonts/Syncopate/Syncopate-Regular.ttf');
      this.loadFont('Tinos', 'fonts/Tinos/Tinos-Regular.ttf');
      return this.loadFont('Ubuntu', 'fonts/Ubuntu/Ubuntu-Regular.ttf');
    };

    FontManager.prototype.loadFont = function(name, url) {
      var str, xhr;
      str = "<style rel='stylesheet' type='text/css'>@font-face {font-family: '" + name + "'; src: url(" + url + ");}</style>";
      $('head').append(str);
      Poe.Fonts[name] = url;
      xhr = new XMLHttpRequest();
      xhr.responseType = 'arraybuffer';
      xhr.overrideMimeType('text/plain; charset=x-user-defined');
      xhr.open('GET', url, true);
      xhr.onload = function(e) {
        if (this.status === 200) {
          Poe.Fonts[name] = e.target.response;
          return console.log("FontManager: Adding font '" + name + "'");
        }
      };
      xhr.send();
      if (typeof this.addedCallback === 'function') {
        return this.addedCallback(name);
      }
    };

    FontManager.prototype.on = function(event, callback) {
      if (event === 'newFont') {
        return this.addedCallback = callback;
      }
    };

    return FontManager;

  })();

}).call(this);

//# sourceMappingURL=FontManager.js.map
